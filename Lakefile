busybox = import("lake/lib/busybox")

defaults {
  # Shell? Builder? Interpreter? Command
  shell = busybox.shell
}

command "hello" { script = "echo 'hello $1'" }

command "busybox_shell" {
  script = <<EOH
    #!${busybox.busybox_tar}/bin/busybox sh
    export PATH=$busybox_store/bin/
    sh $@
  EOH
}

store "empty_store" {
  inputs = []
  script = <<EOH
    sh ./script.sh
  EOH
}


store "one" {
  inputs = ["./script.sh"]
  script = "./script.sh"
}

# I can override?
store "two" {
  shell  = ["${busybox.busybox_tar}/bin/busybox", "bash", "-c"]
  inputs = ["./script.sh"]
  script = "./script.sh"
}


hi = "hi"
# Look how minimal?
command "say-hi" { script = "echo ${hi}" }



# Do self references work? Doesn't this loop infinitely? How do wildcard matches
# work with various identifier names? Like what if I have another target called
# "./other.Lakefile"?
#
# fwiw Make doesn't allow this, how do we do modification of existing files?
# just as target commands?
#
# TODO: disallow globs and circular references (if we figure out how to add them
# we can do it later)
command "format_everything" {
  inputs = ["*.go"]
  script = <<EOH
  nomad fmt .
  EOH
}


for_expr         = [for o in busybox.shell : o]
splat_expr       = busybox.shell[*]
conditional_expr = true ? busybox.shell : busybox.shell

# unimplemented
# template_expr    = "Hello, %{if busybox.busybox != ""}${busybox.busybox}%{else}unnamed%{endif}!"
